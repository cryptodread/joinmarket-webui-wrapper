id: joinmarket-webui 
title: JAM
version: 0.0.6
release-notes: Initial release for EmbassyOS v0.3.0.3
license: mit
wrapper-repo: "https://github.com/cryptodread/joinmarket-webui-wrapper"
upstream-repo: "https://github.com/joinmarket-webui/joinmarket-webui"
support-site: "https://github.com/joinmarket-webui/joinmarket-webui/issues"
marketing-site: "https://t.me/JoinMarketWebUI"
build: ["make"]
description:
  short: JAM - A friendly UI for JoinMarket 
  long: |
    Jam is a web UI for JoinMarket with focus on user-friendliness. 
    It aims to provide sensible defaults and be easy to use for beginners while still providing the features advanced users expect.
assets:
  license: LICENSE
  icon: icon.png
  instructions: docs/instructions.md
  docker-images: image.tar
main:
  type: docker
  image: main
  entrypoint: "docker_entrypoint.sh"
  args: []
  mounts:
    main: /root
health-checks:
  main:
    name: JAM API
    success-message: The JAM API is accessible and responding
    type: docker
    image: main
    entrypoint: "check-web.sh"
    args: []
    inject: true
    system: false
    io-format: json
config:
  get:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - config
      - get
      - /root
      - "/mnt/assets/config_spec.yaml"
    mounts:
      compat: /mnt/assets
      main: /root
    io-format: yaml
  set:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - config
      - set
      - joinmarket-webui
      - /root
      - "/mnt/assets/config_rules.yaml"
    mounts:
      compat: /mnt/assets
      main: /root
    io-format: yaml
volumes:
  main:
    type: data
  compat:
    type: assets 
interfaces:
  main:
    name: JoinMarket Web UI
    description: Specifies the interface to listen on for HTTP connections.
    tor-config:
      port-mapping:
        80: "3000"
    lan-config:
      443:
        ssl: true
        internal: 3000
    ui: true
    protocols:
      - tcp
      - http
dependencies: 
  bitcoind:
    version: ">=0.21.1.2 <=23.0.0"
    requirement:
      type: "opt-out"
      how: Can alternatively configure proxy or bitcoin core  node.
    description: Used to subscribe to new block events from a full archival node.
    config:
      check: 
        type: docker
        image: compat
        system: true
        entrypoint: compat
        args:
          - dependency
          - check
          - joinmarket-webui
          - bitcoind
          - /root
          - "/mnt/assets/bitcoind_config_rules.yaml"
        mounts:
          compat: /mnt/assets
          main: /root
        io-format: yaml
      auto-configure:
        type: docker
        image: compat
        system: true
        entrypoint: compat
        args:
          - dependency
          - "auto-configure"
          - "joinmarket-webui"
          - bitcoind
          - /root
          - "/mnt/assets/bitcoind_config_rules.yaml"
        mounts:
          compat: /mnt/assets
          main: /root
        io-format: yaml
  btc-rpc-proxy:
    version: ">=0.3.2.1 <0.4.0"
    requirement:
      type: "opt-in"
      how: Can alternatively configure proxy or bitcoin core  node.
    description: Used for RPC permissioning.
    config:
      check:
        type: docker
        image: compat
        system: true
        entrypoint: compat
        args:
          - dependency
          - check
          - joinmarket-webui
          - "btc-rpc-proxy"
          - /root
          - "/mnt/assets/btc-rpc-proxy_config_rules.yaml"
        mounts:
          main: /root
          compat: /mnt/assets
        io-format: yaml
      auto-configure:
        type: docker
        image: compat
        system: true
        entrypoint: compat
        args:
          - dependency
          - "auto-configure"
          - joinmarket-webui
          - "btc-rpc-proxy"
          - /root
          - "/mnt/assets/btc-rpc-proxy_config_rules.yaml"
        mounts:
          main: /root
          compat: /mnt/assets
        io-format: yaml
alerts:
  start: |
    READ CAREFULLY! This is still ALPHA software, and there is still work in progress. Use with caution. 
backup:
  create:
    type: docker
    image: compat
    system: true 
    entrypoint: compat 
    args: 
      - duplicity
      - create
      - /mnt/backup
      - /root/data
    mounts:
      BACKUP: "/mnt/backup" 
      main: "/root/data"
  restore:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - duplicity
      - restore
      - /root/data
      - /mnt/backup
    mounts:
      BACKUP: "/mnt/backup"
      main: "/root/data"